version: 2.1
orbs:
  node: {}
  orb-tools: circleci/orb-tools@12.0
  jq: circleci/jq@3.0
filters: &filters
  tags:
    only: /.*/
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

executors:
  linux:
    docker:
      - image: cimg/base:stable
  macos:
    macos:
      xcode: 15.1.0
  machine:
    machine:
      image: ubuntu-2004:current
  windows:
    machine:
      image: windows-server-2022-gui:current
      shell: bash.exe
    resource_class: windows.medium
jobs:
  # Install Node.js into a non-node container.
  integration-test-install-specified-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          node-version: "16.13"
          install-yarn: true # Test the install of YARN
          yarn-version: "1.22.5"
      - run:
          command: |
            if ! node --version | grep -q "16"; then
              echo "Node version 16 not found"
              exit 1
            fi
  integration-test-install-pnpm:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          install-pnpm: true # Test the install of PNPM
          pnpm-version: "9.7.1"
      - run:
          command: |
            if ! pnpm --version | grep -q "9.7.1"; then
              echo "pnpm version 9.7.1 not found"
              exit 1
            fi

  integration-test-install-latest:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          node-version: "latest"
      - run:
          name: Check that latest Node.js is installed.
          command: |
            NODE_ORB_INSTALL_VERSION=$(nvm ls-remote | tail -n1 | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+')

            echo "Latest Node version = $NODE_ORB_INSTALL_VERSION"
            echo "Installed version: $(node --version)"
            if ! node --version | grep -q "$NODE_ORB_INSTALL_VERSION"; then
              echo "Error: Installed version is different from the latest version."
              exit 1
            fi

  integration-test-use-nvmrc-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - run: echo '16.13' > .nvmrc
      - node/install

  integration-test-use-node-version-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - run: echo '16.13' > .node-version
      - node/install

  integration-test-install-lts:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install
      - run:
          name: Check that the latest LTS version of Node.js is installed.
          command: |
            NODE_ORB_INSTALL_VERSION=$(nvm ls-remote | grep 'Latest LTS' | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+')
            echo "Latest Node LTS version = $NODE_ORB_INSTALL_VERSION"
            echo "Installed version: $(node --version)"
            if ! node --version | grep -q "$NODE_ORB_INSTALL_VERSION"; then
              echo "Error: Installed version is different from the latest LTS version."
              exit 1
            fi

  integration-test-override-ci:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: npm install
          cache-path: ~/project/node_modules
          cache-version: override-v3
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && npm run test
  integration-test-override-ci-windows:
    executor: windows
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            nvm install lts
            nvm use lts
      - node/install-packages:
          override-ci-command: npm install
          cache-path: ~/project/node_modules
          cache-version: override-v3
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && npm run test
  integration-test-pnpm:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          name: Remove other lock files
          command: |
            rm ~/project/sample/package-lock.json
            rm ~/project/sample/yarn.lock
      - node/install-packages:
          pkg-manager: pnpm
          cache-version: pnpm-v1
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && pnpm test
  integration-test-yarn:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
          cache-version: yarn-v3
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && yarn test
  integration-test-yarn-berry:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
          cache-version: yarn-berry-v1
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && yarn test

workflows:
  test-deploy:
    jobs:
      - integration-test-install-specified-version:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - integration-test-install-pnpm:
          filters: *filters
          matrix:
            parameters:
              os: [ linux, macos, machine ]
      - integration-test-install-latest:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - integration-test-install-lts:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - node/test:
          filters: *filters
          name: node-npm-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: jest
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-yarn-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: jest
          pkg-manager: yarn
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
      - node/test:
          filters: *filters
          name: node-pnpm-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: jest
          pkg-manager: pnpm
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-npm-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: mocha
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-yarn-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: mocha
          pkg-manager: yarn
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
      - node/test:
          filters: *filters
          name: node-pnpm-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: mocha
          pkg-manager: pnpm
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-yarn-mocha-with-test-result-path-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-for: mocha
          pkg-manager: yarn
          run-command: testmocha
          test-results-path: sample/test-results.xml
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
      - node/test:
          filters: *filters
          name: node-test-results-file-job
          app-dir: "~/project/sample"
          cache-version: v4
          test-results-path: sample/other-junit.xml
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-test-no-junit
          app-dir: "~/project/sample"
          cache-version: v4
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
      - node/test:
          filters: *filters
          name: node-test-with-coverage
          app-dir: "~/project/sample"
          cache-version: v4
          run-command: "test:coverage"
          test-coverage-path: ~/project/sample/coverage
      - node/run:
          filters: *filters
          name: node-run-npm-job
          app-dir: "~/project/sample"
          cache-version: v4
          npm-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
      - node/run:
          filters: *filters
          name: node-run-yarn-job
          app-dir: "~/project/sample"
          cache-version: v6
          pkg-manager: yarn
          yarn-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
      - node/run:
          filters: *filters
          name: node-run-upload-artifacts
          app-dir: "~/project/sample"
          cache-version: v4
          npm-run: build
          artifacts-path: "~/project/sample/dist"
      - node/run:
          filters: *filters
          name: node-run-pnpm-job
          app-dir: "~/project/sample"
          cache-version: v5
          pkg-manager: pnpm
          pnpm-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
      - integration-test-override-ci:
          filters: *filters
      - integration-test-pnpm:
          filters: *filters
      - integration-test-override-ci-windows:
          filters: *filters
      - integration-test-yarn:
          filters: *filters
      - integration-test-yarn-berry:
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/node
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires:
            - orb-tools/pack
            - integration-test-install-specified-version
            - integration-test-install-latest
            - integration-test-install-lts
            - integration-test-install-pnpm
            - integration-test-pnpm
            - node-yarn-mocha-with-test-result-path-job
            - node-test-results-file-job
            - node-run-npm-job
            - node-run-yarn-job
            - node-run-pnpm-job
            - node-run-upload-artifacts
          github_token: GHI_TOKEN
          context: orb-publisher
          filters: *release-filters
