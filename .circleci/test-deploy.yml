version: 2.1
orbs:
  node: {}
  orb-tools: circleci/orb-tools@12.0
  jq: circleci/jq@3.0
filters: &filters
  tags:
    only: /.*/
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

executors:
  linux:
    docker:
      - image: cimg/base:stable
  macos:
    macos:
      xcode: 16.3.0
  machine:
    machine:
      image: ubuntu-2004:current
  windows:
    machine:
      image: windows-server-2022-gui:current
      shell: bash.exe
    resource_class: windows.medium
jobs:
  # Install Node.js into a non-node container.
  integration-test-install-specified-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          node-version: "16.13"
          install-yarn: true # Test the install of YARN
          yarn-version: "1.22.5"
          nvm-cache-key: v2
      - run:
          command: |
            if ! node --version | grep -q "16"; then
              echo "Node version 16 not found"
              exit 1
            fi
  integration-test-install-pnpm:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          install-pnpm: true # Test the install of PNPM
          pnpm-version: "9.7.1"
          nvm-cache-key: v2-{{ arch }}
      - run:
          command: |
            if ! pnpm --version | grep -q "9.7.1"; then
              echo "pnpm version 9.7.1 not found"
              exit 1
            fi
  integration-test-install-bun-specified:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          nvm-cache-key: v2
      - node/install-bun:
          version: "1.2.21" # Test the install of specific Bun version
      - run:
          command: |
            if ! bun --version | grep -q "1.2.21"; then
              echo "Bun version 1.2.21 not found"
              exit 1
            fi
  integration-test-install-bun-latest:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          nvm-cache-key: v2
      - node/install-bun # Test the install of latest Bun version
      - run:
          name: Check that Bun is installed and working
          command: |
            bun --version
            echo "Bun version: $(bun --version)"
            # Verify Bun can execute basic JavaScript
            echo 'console.log("Hello from Bun!")' > test.js
            bun run test.js
  integration-test-reinstall-yarn:
    machine:
      image: ubuntu-2004:current
    steps:
      - node/install-yarn
  integration-test-install-latest:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install:
          node-version: "latest"
          nvm-cache-key: v2
      - run:
          name: Check that latest Node.js is installed.
          command: |
            NODE_ORB_INSTALL_VERSION=$(nvm ls-remote | tail -n1 | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+')

            echo "Latest Node version = $NODE_ORB_INSTALL_VERSION"
            echo "Installed version: $(node --version)"
            if ! node --version | grep -q "$NODE_ORB_INSTALL_VERSION"; then
              echo "Error: Installed version is different from the latest version."
              exit 1
            fi

  integration-test-override-yarn:
    docker:
      - image: cimg/ruby:3.3.5-browsers
    steps:
      - node/install: 
          install-yarn: true
          node-version: '22.11.0'

  integration-test-use-nvmrc-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - run: echo '16.13' > .nvmrc
      - node/install

  integration-test-use-node-version-version:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - run: echo '16.13' > .node-version
      - node/install

  integration-test-install-lts:
    parameters:
      os:
        type: executor
    executor: <<parameters.os>>
    steps:
      - checkout
      - node/install
      - run:
          name: Check that the latest LTS version of Node.js is installed.
          command: |
            NODE_ORB_INSTALL_VERSION=$(nvm ls-remote | grep 'Latest LTS' | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+')
            echo "Latest Node LTS version = $NODE_ORB_INSTALL_VERSION"
            echo "Installed version: $(node --version)"
            if ! node --version | grep -q "$NODE_ORB_INSTALL_VERSION"; then
              echo "Error: Installed version is different from the latest LTS version."
              exit 1
            fi

  integration-test-override-ci:
    parameters:
      resource_class:
        type: enum
        default: medium
        description: Configure the executor resource class
        enum:
            - medium
            - arm.medium
    executor:
      name: node/default
      resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: npm install
          cache-path: ~/project/node_modules
          cache-version: override-v3
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && npm run test
  integration-test-override-ci-windows:
    executor: windows
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            nvm install lts
            nvm use lts
      - node/install-packages:
          override-ci-command: npm install
          cache-path: ~/project/node_modules
          cache-version: override-v3
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && npm run test
  integration-test-pnpm:
    parameters:
      resource_class:
        type: enum
        default: medium
        description: Configure the executor resource class
        enum:
            - medium
            - arm.medium
    executor:
      name: node/default
      resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - run:
          name: Remove other lock files
          command: |
            rm ~/project/sample/package-lock.json
            rm ~/project/sample/yarn.lock
      - node/install-pnpm:
          version: "9.12.3"
      - node/install-packages:
          pkg-manager: pnpm
          cache-version: pnpm-v1
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && pnpm test
  integration-test-bun:
    parameters:
      resource_class:
        type: enum
        default: medium
        description: Configure the executor resource class
        enum:
            - medium
            - arm.medium
    executor:
      name: node/default
      resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - run:
          name: Remove other lock files and create bun lockfile
          command: |
            rm ~/project/sample/package-lock.json
            rm ~/project/sample/yarn.lock
            rm ~/project/sample/pnpm-lock.yaml
            rm ~/project/sample/yarn-berry.lock
      - node/install-bun:
          version: "1.2.21"
      - node/install-packages:
          pkg-manager: bun
          cache-path: ~/.bun/install/cache
          cache-version: bun-v1
          app-dir: "~/project/sample"
      - run: cd ~/project/sample && bun test
  integration-test-yarn:
    parameters:
      resource_class:
        type: enum
        default: medium
        description: Configure the executor resource class
        enum:
            - medium
            - arm.medium
    executor:
      name: node/default
      resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
          cache-version: yarn-v3
          app-dir: "~/project/sample"
      - run: yarn --version
      - run: cd ~/project/sample && yarn test
  integration-test-yarn-berry-nocimg:
    environment:
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    docker:
    - image: cypress/browsers
    steps:
      - checkout
      - run: mv ~/project/sample/package-berry.json ~/project/sample/package.json
      - node/install-packages:
          pkg-manager: yarn-berry
          cache-version: yarn-berry-v2
          app-dir: "~/project/sample"
          override-ci-command: yarn install
      - run: cd ~/project/sample && yarn test
  integration-test-yarn-berry:
    environment:
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    parameters:
      resource_class:
        type: enum
        default: medium
        description: Configure the executor resource class
        enum:
            - medium
            - arm.medium
    executor:
      name: node/default
      resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - run: mv ~/project/sample/package-berry.json ~/project/sample/package.json
      - node/install-packages:
          pkg-manager: yarn-berry
          cache-version: yarn-berry-v2
          app-dir: "~/project/sample"
          override-ci-command: yarn install
      - run: cd ~/project/sample && yarn test

workflows:
  test-deploy:
    jobs:
      - integration-test-override-yarn:
          filters: *filters
      - integration-test-reinstall-yarn:
          filters: *filters
      - integration-test-install-specified-version:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - integration-test-install-pnpm:
          filters: *filters
          matrix:
            parameters:
              os: [ linux, macos, machine ]
      - integration-test-install-bun-specified:
          filters: *filters
          matrix:
            parameters:
              os: [ linux, macos, machine ]
      - integration-test-install-bun-latest:
          filters: *filters
          matrix:
            parameters:
              os: [ linux, macos, machine ]
      - integration-test-install-latest:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - integration-test-install-lts:
          filters: *filters
          matrix:
            parameters:
              os: [linux, macos, machine]
      - node/test:
          filters: *filters
          name: node-npm-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: jest
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-yarn-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: jest
          pkg-manager: yarn
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-pnpm-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: jest
          pkg-manager: pnpm
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-npm-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: mocha
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-yarn-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: mocha
          pkg-manager: yarn
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-yarn-berry-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v2-berry
          test-results-for: mocha
          pkg-manager: yarn-berry
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/package.json
                  mv ~/project/sample/yarn-berry.lock ~/project/sample/yarn.lock
                  mv ~/project/sample/package-berry.json ~/project/sample/package.json
      - node/test:
          filters: *filters
          name: node-pnpm-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: mocha
          pkg-manager: pnpm
          run-command: testmocha
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-bun-jest-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: jest
          pkg-manager: bun
          cache-path: ~/.bun/install/cache
          setup:
            - node/install-bun:
                version: "1.2.21"
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-bun-mocha-test-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: mocha
          pkg-manager: bun
          cache-path: ~/.bun/install/cache
          run-command: testmocha
          setup:
            - node/install-bun:
                version: "1.2.21"
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-yarn-mocha-with-test-result-path-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-for: mocha
          pkg-manager: yarn
          run-command: testmocha
          test-results-path: sample/test-results.xml
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-test-results-file-job
          app-dir: "~/project/sample"
          cache-version: v2
          test-results-path: sample/other-junit.xml
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-test-no-junit
          app-dir: "~/project/sample"
          cache-version: v2
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-test-no-junit-new-features
          app-dir: "~/project/sample"
          cache-version: v2
          executor: machine
          parallelism: 4
          post_install_steps:
            - run: |
                echo "Packages installed"
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/test:
          filters: *filters
          name: node-test-with-coverage
          app-dir: "~/project/sample"
          cache-version: v2
          run-command: "test:coverage"
          test-coverage-path: ~/project/sample/coverage
      - node/run:
          filters: *filters
          name: node-run-npm-job
          app-dir: "~/project/sample"
          cache-version: v2
          npm-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/run:
          filters: *filters
          name: node-run-yarn-job
          app-dir: "~/project/sample"
          cache-version: v6
          pkg-manager: yarn
          yarn-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - node/run:
          filters: *filters
          name: node-run-upload-artifacts
          app-dir: "~/project/sample"
          cache-version: v2
          npm-run: build
          artifacts-path: "~/project/sample/dist"
      - node/run:
          filters: *filters
          name: node-run-pnpm-job
          app-dir: "~/project/sample"
          cache-version: v5
          pkg-manager: pnpm
          pnpm-run: build
          setup:
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/yarn-berry.lock
      - node/run:
          filters: *filters
          name: node-run-bun-job
          app-dir: "~/project/sample"
          cache-version: v3
          pkg-manager: bun
          bun-run: build
          cache-path: ~/.bun/install/cache
          setup:
            - node/install-bun:
                version: "1.2.21"
            - run:
                name: Remove other lock files
                command: |
                  rm ~/project/sample/package-lock.json
                  rm ~/project/sample/yarn.lock
                  rm ~/project/sample/pnpm-lock.yaml
                  rm ~/project/sample/yarn-berry.lock
      - integration-test-override-ci:
          matrix:
            alias: integration-test-override-ci
            parameters:
              resource_class: [arm.medium, medium]
          filters: *filters
      - integration-test-pnpm:
          matrix:
            alias: integration-test-pnpm
            parameters:
              resource_class: [arm.medium, medium]
          filters: *filters
      - integration-test-bun:
          matrix:
            alias: integration-test-bun
            parameters:
              resource_class: [arm.medium, medium]
          filters: *filters
      - integration-test-override-ci-windows:
          filters: *filters
      - integration-test-yarn:
          matrix:
            alias: integration-test-yarn
            parameters:
              resource_class: [arm.medium, medium]
          filters: *filters
      - integration-test-yarn-berry:
          matrix:
            alias: integration-test-yarn-berry
            parameters:
              resource_class: [arm.medium, medium]
          filters: *filters
      - integration-test-yarn-berry-nocimg:
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/node
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires:
            - orb-tools/pack
            - integration-test-override-ci-windows
            - integration-test-override-ci
            - integration-test-yarn
            - integration-test-yarn-berry
            - integration-test-yarn-berry-nocimg
            - integration-test-install-specified-version
            - integration-test-install-latest
            - integration-test-install-lts
            - integration-test-install-pnpm
            - integration-test-install-bun-specified
            - integration-test-install-bun-latest
            - integration-test-pnpm
            - integration-test-bun
            - integration-test-reinstall-yarn
            - node-yarn-mocha-with-test-result-path-job
            - integration-test-override-yarn
            - node-yarn-mocha-test-job
            - node-yarn-jest-test-job
            - node-test-results-file-job
            - node-npm-jest-test-job
            - node-test-with-coverage
            - node-run-npm-job
            - node-pnpm-mocha-test-job
            - node-bun-jest-test-job
            - node-bun-mocha-test-job
            - node-test-no-junit
            - node-pnpm-jest-test-job
            - node-run-yarn-job
            - node-run-pnpm-job
            - node-run-bun-job
            - node-run-upload-artifacts
          github_token: GHI_TOKEN
          context: orb-publisher
          filters: *release-filters
