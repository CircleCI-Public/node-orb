description: >
    Install your Node packages with automated caching and best practices applied.
    Requires lock file.

parameters:
    pkg-manager:
        type: enum
        enum: ['npm', 'yarn', 'yarn-berry', 'pnpm']
        default: 'npm'
        description: Select the default node package manager to use. NPM v5+ Required.
    with-cache:
        type: boolean
        default: true
        description: |
            Cache your node packages automatically for faster install times.
            Cache will be ignored when using npm ci.
    check-cache:
        type: enum
        default: 'never'
        enum: ['never', 'always', 'detect']
        description: |
            Yarn berry only for Zero install support -
            Use 'always' to always --check-cache argument to yarn install.
            Use 'detect' to enable caching of yarn.lock and to only add when required.
    app-dir:
        type: string
        default: '.'
        description: Path to the directory containing your package.json file. Not needed if package.json lives in the root.
    override-ci-command:
        description: |
            By default, packages will be installed with "npm ci", "yarn install --frozen-lockfile", "yarn install --immutable" or "pnpm install --frozen-lockfile".
            Optionally supply a custom package installation command, with any additional flags needed.
            When the command npm ci is used, no cache will be used, as the command doesn't benefit from it.
        type: string
        default: ''
    cache-path:
        description: |
            By default, this orb will utilize 'npm ci' and cache the '~/.npm' directory. Override which path to cache with this parameter.
            The cache will be ignored when using npm ci, as the command doesn't benefit from cache.
        type: string
        default: ''
    cache-only-lockfile:
        type: boolean
        default: true
        description: |
            If true, package.json will be ignored in the cache key. Useful for projects where package.json changes do not always invalidate dependencies.
            Note: package.json will still be the final fallback key incase a project is not configured with a lock file.
    cache-version:
        type: string
        default: 'v1'
        description: Change the default cache version if you need to clear the cache for any reason.
    include-branch-in-cache-key:
        type: boolean
        default: true
        description: >
            If true, this cache bucket will only apply to jobs within the same branch.

steps:
    - run:
          name: Checking for package.json
          working_directory: <<parameters.app-dir>>
          command: <<include(scripts/packages/find-package.sh)>>

    - when:
          condition:
            and:
            - << parameters.with-cache >>
            - or:
                - not:
                    equal: [npm, << parameters.pkg-manager >>]
                - and:
                    - << parameters.override-ci-command >>
                    - not:
                        equal: ["npm-ci", << parameters.override-ci-command >>]
          steps:
              - run:
                    working_directory: <<parameters.app-dir>>
                    name: Determine lockfile
                    command: <<include(scripts/packages/determine-lockfile.sh)>>

              - restore_cache: # Include branch and package.json checksum if defined. Prioritize lock-file as it is a more definitive version of dependency cache.
                    keys:
                        - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                        - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/node-project-package.json" }}
                        - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>

    - when: # Install packages based on NPM
          condition:
              equal: [npm, << parameters.pkg-manager >>]
          steps:
              - run:
                    name: Installing NPM packages
                    working_directory: <<parameters.app-dir>>
                    environment:
                        PARAM_CACHE_PATH: << parameters.cache-path >>
                        PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                    command: <<include(scripts/packages/npm-install.sh)>>

              - when: # cache enabled, save cache
                    condition:
                        and:
                        - << parameters.with-cache >>
                        - << parameters.override-ci-command >>
                        - not:
                            equal: ["npm-ci", << parameters.override-ci-command >>]
                    steps:
                        - when: # custom cache path selected
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - << parameters.cache-path >>
                        - unless: # npm ci cache path
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - ~/.npm

    - when: # Install packages based on PNPM
        condition:
          equal: [ pnpm, << parameters.pkg-manager >> ]
        steps:
          - run:
              name: Installing PNPM packages
              working_directory: <<parameters.app-dir>>
              environment:
                PARAM_CACHE_PATH: << parameters.cache-path >>
                PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
              command: <<include(scripts/packages/pnpm-install.sh)>>

          - when: # cache enabled, save cache
              condition: << parameters.with-cache >>
              steps:
                - when: # custom cache path selected
                    condition: << parameters.cache-path >>
                    steps:
                      - save_cache:
                          key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                          paths:
                            - <<parameters.cache-path>>
                - unless: # use node modules
                    condition: << parameters.cache-path >>
                    steps:
                      - save_cache:
                          key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                          paths:
                            - <<parameters.app-dir>>/node_modules

    - when: # Install packages based on YARN
          condition:
              equal: [yarn, << parameters.pkg-manager >>]
          steps:
              - run:
                    name: Installing YARN packages
                    working_directory: <<parameters.app-dir>>
                    environment:
                        YARN_CACHE_FOLDER: << parameters.cache-path >>
                        PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                    command: <<include(scripts/packages/yarn-v1-install.sh)>>

              - when: # cache enabled, save cache
                    condition: << parameters.with-cache >>
                    steps:
                        - when: # custom cache path selected
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.cache-path>>
                        - unless: # use node modules
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths: # yarn v1 cache is slow, so it is faster to use node
                                            - <<parameters.app-dir>>/node_modules

    - when: # Install packages based on YARN
          condition:
              equal: [yarn-berry, << parameters.pkg-manager >>]
          steps:
              - when: # check-cache is set to detect, so cache yarn lock
                    condition:
                        equal: [detect, << parameters.check-cache >>]
                    steps:
                        - restore_cache:
                              keys:
                                  - yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/yarn-zero-lockfile" }}
                                  - yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>

              - run:
                    name: Installing YARN packages
                    working_directory: <<parameters.app-dir>>
                    environment:
                        PARAM_CACHE_PATH: << parameters.cache-path >>
                        PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                        PARAM_CHECK_CACHE: << parameters.check-cache >>
                    command: <<include(scripts/packages/yarn-berry-install.sh)>>
              - when: # check-cache is set to detect, so cache yarn lock
                    condition:
                        equal: [detect, << parameters.check-cache >>]
                    steps:
                        - save_cache:
                              key: yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/yarn-zero-lockfile" }}
                              paths:
                                  - <<parameters.cache-path>>
              - when: # cache enabled, save cache
                    condition: << parameters.with-cache >>
                    steps:
                        - when: # custom cache path selected
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.cache-path>>
                        - unless: # use node modules
                              condition: << parameters.cache-path >>
                              steps:
                                  - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - ~/.yarn/berry/cache # global cache, the default in Yarn Berry v4+
                                            - <<parameters.app-dir>>/.yarn/cache # project cache, the default in Yarn Berry > 2 and < 4
    - when:
          condition: << parameters.with-cache >>
          steps:
              - run:
                    name: 'Remove temporary links'
                    command: rm -f /tmp/node-project-lockfile /tmp/node-project-package.json /tmp/yarn-zero-lockfile
