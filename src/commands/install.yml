description: >
  Install custom versions of NodeJS, and optionally NPM/Yarn, in any
  execution environment (Docker/Linux, macOS, machine) that does not have
  it preinstalled

parameters:
  # node
  node-version:
    type: string
    default: ""
    description: >
      The latest version of nodeJS will be installed unless a version is specified. A full version tag must be specified. Example: "13.11.0"
      For a full list of releases, see the following: https://nodejs.org/en/download/releases

  node-install-dir:
    type: string
    default: /usr/local
    description: >
      Where should Node.js be installed?

  # npm
  install-npm:
    type: boolean
    default: true
    description: Install NPM?

  npm-version:
    type: string
    default: latest
    description: >
      Pick a version of NPM to install:
      https://nodejs.org/en/download/releases
      (Note: NPM version selection is not possible on Alpine Linux;
      on Alpine, the `npm` Alpine pkg will be installed:
      https://pkgs.alpinelinux.org/packages?name=npm)

  # yarn
  install-yarn:
    type: boolean
    default: true
    description: Install Yarn?

  yarn-version:
    type: string
    default: ""
    description: >
      Pick a version of Yarn to install (if no version is specified,
      the latest stable version will be installed):
      https://github.com/yarnpkg/yarn/releases

steps:
  - run:
      name: Installing NodeJS
      command: |
        # PLATFORM CHECK: mac vs. alpine vs. other linux

        SYS_ENV_PLATFORM=linux
        if uname -a | grep Darwin; then
          SYS_ENV_PLATFORM=darwin
        elif cat /etc/issue | grep Alpine; then
          SYS_ENV_PLATFORM=alpine
        fi

        # FUNCTIONS

        nvm_check () {
          if [[ -n "$NVM_DIR" ]]; then
            echo "nvm (Node.js version manager) is installed; removing it to manually install the specified version of Node.js"

            $SUDO rm -rf "$NVM_DIR"

            perl -i -pe 's|export NVM_DIR=/opt/circleci/.nvm||' ~/.circlerc
            perl -i -pe 's|source $NVM_DIR/nvm.sh||' ~/.circlerc

            perl -i -pe 's|export NVM_DIR="/opt/circleci/.nvm"||' ~/.bashrc
            perl -i -pe 's|[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm||' ~/.bashrc
          fi
        }

        get_node_version () {
          if [[ <<parameters.node-version>> == "" ]]; then
            NODE_ORB_INSTALL_VERSION=$(curl --silent --show-error \
              --location --fail --retry 3 \
              https://api.github.com/repos/nodejs/node/releases/latest | \
              grep tag_name | cut -d '"' -f 4 | \
              cut -d 'v' -f 2)
            echo "Latest version of Node.js is $NODE_ORB_INSTALL_VERSION"
          else
            NODE_ORB_INSTALL_VERSION="v<<parameters.version>>"
            echo "Selected version of Node.js is $NODE_ORB_INSTALL_VERSION"
          fi
        }

        installation_check () {
          if command -v node; then
            nvm_check

            if node --version | grep "$NODE_ORB_INSTALL_VERSION"; then

              echo "Node.js $NODE_ORB_INSTALL_VERSION is already installed"
              exit 0
            else
              echo "A different version of Node.js is installed ($(node --version)); removing it"

              $SUDO rm -rf "$(command -v node)"
              $SUDO rm -rf "$(command -v node | sed -E 's|node||')/nodejs"

              $SUDO rm -rf "$(command -v npm)"

              $SUDO rm -rf \
                /usr/local/lib/node_modules \
                /usr/local/include/node_modules \
                /opt/local/lib/node_modules

            fi
          fi
        }

        # Install logic per platform

        case $SYS_ENV_PLATFORM in
          alpine)
            echo "Install for alpine, or remove"
          ;;

          linux)
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

            get_node_version
            nvm_check
            installation_check

            $SUDO curl \
              --silent --show-error --location --fail --retry 3 \
              https://raw.githubusercontent.com/nodejs/node/master/README.md | \
              grep -E '[A-Z0-9]{40}' | \
              sed -E 's/gpg --keyserver pool.sks-keyservers.net --recv-keys //g' | \
              sed -E 's/(`|\$ )//g' > \
              NODEJS_TRUSTED_RELEASE_KEYS

            cat > KEYSERVERS \<< EOM
              hkp://p80.pool.sks-keyservers.net:80
              hkp://ipv4.pool.sks-keyservers.net
              hkp://pgp.mit.edu:80
              hkps://ha.pool.sks-keyservers.net
              hkp://keyserver.ubuntu.com:80
            EOM

            echo "Importing Node.js trusted release keys..."
            # https://stackoverflow.com/a/26217767
            while read key; do
              for keyserver in $(cat KEYSERVERS); do
                tempName=$(mktemp)
                gpg --status-fd 1 \
                  --keyserver "$keyserver" --keyserver-options "timeout=1" \
                  --recv-keys "$key" 1> "$tempName" 2>/dev/null || true
                if [[ $(grep "^\[GNUPG\:\] IMPORT_OK "[[:digit:]]*" "$key"$" $tempName && \
                  grep "^\[GNUPG\:\] IMPORT_RES 1" $tempName) ]]; then
                  break
                else
                  continue
                fi
              done
            done < NODEJS_TRUSTED_RELEASE_KEYS

            $SUDO rm -f NODEJS_TRUSTED_RELEASE_KEYS KEYSERVERS

            $SUDO curl -O \
              --silent --show-error --location --fail --retry 3 \
              "https://nodejs.org/dist/v$NODE_ORB_INSTALL_VERSION/SHASUMS256.txt.asc"

            gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc > /dev/null \
              && $SUDO rm -f SHASUMS256.txt.asc

            # download/install node
            $SUDO curl -O \
              --silent --show-error --location --fail --retry 3 \
                "https://nodejs.org/dist/v$NODE_ORB_INSTALL_VERSION/node-v$NODE_ORB_INSTALL_VERSION-$PLATFORM-x64.tar.gz"

            # verify node tar via shasum256
            grep "node-v$NODE_ORB_INSTALL_VERSION-$PLATFORM-x64.tar.gz" SHASUMS256.txt | sha256sum -c -

            $SUDO rm -f SHASUMS256.txt

            $SUDO tar -xzf "node-v$NODE_ORB_INSTALL_VERSION-$PLATFORM-x64.tar.gz" \
              -C <<parameters.node-install-dir>> \
              --strip-components=1 --no-same-owner

            $SUDO rm -f "node-v$NODE_ORB_INSTALL_VERSION-$PLATFORM-x64.tar.gz"

            if [[ ! -e <<parameters.node-install-dir>>/bin/nodejs ]]; then
              $SUDO ln -s <<parameters.node-install-dir>>/bin/node <<parameters.node-install-dir>>/bin/nodejs
            fi
          fi
          ;;

          darwin)
            echo "install for MacOS"
          ;;
        esac

        # test/verify version

        if node --version | grep "$VERSION" > /dev/null; then
          echo "Node.js $(node --version) has been installed to $(which node)"
        else
          echo "Something went wrong; the specified version of Node.js could not be installed"
          exit 1
        fi

  - when:
      condition: <<parameters.install-npm>>
      steps:
        - install-npm:
            version: <<parameters.npm-version>>

  - when:
      condition: <<parameters.install-yarn>>
      steps:
        - install-yarn:
            version: <<parameters.yarn-version>>
